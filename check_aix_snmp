#!/usr/bin/perl -w


# CHANGE LOG
# ----------
#   2007/04/13	njeffrey 	Script created
#   2007/10/17	njeffrey 	Add -r 2 -t 5 (retry 2 times, 5 second timeout for snmpget  commands)
#   2007/10/17	njeffrey 	Add -t 2 -w 5 (retry 2 times, 5 second timeout for snmpinfo commands)
#   2021/06/27	njeffrey 	Documentation updates
#   2025/07/22	njeffrey 	Add --verbose parameter, break into subroutines



# Nagios check to confirm the status of the AIX SNMP agent

# CONFIGURATION
#
# This script is executed on the nagios server, and queries a remote AIX host to confirm the AIX SNMP daemons are running
#
# You will need a section in the services.cfg file on the nagios server that looks similar to the following.
#    # Define service to peform SNMP queries against remote AIX machine to confirm AIX SNMP daemons are running
#    # Pass the SNMP community string as the only parameter
#    define service {
#       use                             generic-service
#       hostgroup_name                  all_aix,all_vio
#       service_description             AIX SNMP
#       check_command                   check_aix_snmp!public
#       }
#
#
#
# You will also need a command definition similar to the following in the commands.cfg file:
#    # check_aix_snmp command definition
#    # adjust SNMP community name as appropriate
#    define command{
#       command_name    check_aix_snmp
#       command_line    $USER1$/check_aix_snmp --community=$ARG1$ --host=$HOSTADDRESS$
#       }
#
#
#
# NOTES
# -----
#
# syntax:   check_aix_snmp COMMUNITY HOSTNAME
#
# This script is AIX-specific, as we check 3 different parts of the MIB tree
#    .iso.org.dod.internet.mgmt.mib-2.host.hrSystem.hrSystemUptime                       
#    .iso.org.dod.internet.private.enterprises.ibm.ibmProd.ibmAIX.aixSystem.aixSystemEnvironment  .1.3.6.1.4.1.2.6.191.1.2.1.0
#    .iso.org.dod.internet.private.enterprises.ibm.ibmAgents.aix.aixRISC6000.risc6000private.risc6000perf.xmd.xmdCPU.xmdCPUEntry.xmdCPUIndex  .1.3.6.1.4.1.2.3.1.2.2.2.1.1.1.1.1
#
# If any one of these sections of the MIB tree fail to respond, generate an error
#
# Please note that we use 2>&1 to redirect STDERR to STDOUT.  This ensures we only ever return a single line
# as script output, which is required by nagios.
#
# You should only use this check against AIX machines, as other operating systems will not respond to the AIX MIB or xmd MIB.
#

use diagnostics;                                #tell the perl interpreter to give us verbose messages while debugging
use strict;                                     #enforce good coding practices
use Getopt::Long;                               #allow --long-switches to be used as parameters

#declare variables
my ($community,$hostname,$status,$snmpget,$oid,$cmd,$verbose);
my ($opt_h,$opt_v,$opt_H,$opt_C);
my ($OK,$WARN,$CRITICAL,$UNKNOWN,$CHECK_NAME);
$CHECK_NAME="AIX SNMP";
$verbose = "";

#
# Nagios return codes
#
$OK=0;
$WARN=1;
$CRITICAL=2;
$UNKNOWN=3;





sub get_options {
   #
   # this gets the command line parameters provided by the users
   print "running get_options subroutine \n" if ($verbose eq "yes");
   #
   Getopt::Long::Configure('bundling');
   GetOptions(
      "h"   => \$opt_h, "help"           => \$opt_h,
      "v"   => \$opt_v, "verbose"        => \$opt_v,
      "C=s" => \$opt_C, "community=s"    => \$opt_C,
      "H=s" => \$opt_H, "host=s"         => \$opt_H,
   );
   #
   # see if user provided -v or --verbose switch
   if ( defined($opt_v) ) {
      $verbose = "yes";
      print "   setting verbose=yes \n";
   }                                                    #end of if block
   #
   # see if user provided -h or --help switch
   if ( defined($opt_h) ) {
      print "   Usage: $0  \n";
      print "   Usage: $0 --verbose \n";
      print "   Usage: $0 --help \n";
      print "   Usage: $0 --host=aixhost1.example.com \n";
      print "   Usage: $0 --community=public \n";
      exit;
   }                                                    #end of if block
   #
   # see if user provided -C or --community parameter
   if ( defined($opt_C) ) {
      $community = $opt_C;
      print "   setting community string to: $community \n" if ($verbose eq "yes");
   } else { 
      $community = "public";				#default value
      print "   using default community string: $community \n" if ($verbose eq "yes");
   } 							#end of if/else block
   #
   # see if user provided -H or --host parameter
   if ( defined($opt_H) ) {
      $hostname = $opt_H;
      print "   setting host to: $hostname \n" if ($verbose eq "yes");
   } else { 
      $hostname = "localhost";				#default value
      print "   using default host: $hostname \n" if ($verbose eq "yes");
   } 							#end of if/else block
}                       				#end of subroutine



sub sanity_checks {
   #
   # Find an appropriate SNMP query tool (/usr/bin/snmpinfo on AIX-based nagios servers, /usr/bin/snmpget on Linux-based nagios servers)
   #
   print "running sanity_checks subroutine \n" if ($verbose eq "yes");
   #
   if ( -e "/usr/bin/snmpinfo" ) {
      $snmpget = "/usr/bin/snmpinfo      -t 2 -w 5 -v 1 -c $community -h $hostname"; 
   }
   elsif ( -e "/usr/bin/snmpget" ) {
      $snmpget = "/usr/bin/snmpget       -r 2 -t 5 -v 1 -c $community    $hostname";   
   }
   else {
      print "$CHECK_NAME UNKNOWN - cannot find /usr/bin/snmpinfo or /usr/bin/snmpget command \n";
      exit $UNKNOWN; 
   }
}							#end of subroutine


sub ping_host {
   #
   # Confirm the remote host is up
   #
   print "running ping_host subroutine \n" if ($verbose eq "yes");
   #
   $cmd = "ping -c 1 -w 1 $hostname 2>&1";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   open(IN,"$cmd |");					#send a single ping to the remote host and wait 1 second for a reply
   while (<IN>) {                          		#read a line from STDIN
      if ( /100% packet loss/ ) {			#check for ping timeouts (indicates host may be down)
         $status = "$CHECK_NAME UNKNOWN -- no ping reply from $hostname \n";
         print $status;					#print error message
         exit $UNKNOWN;					#exit script
      } 						#end of if block
      if ( /NOT FOUND/ ) {				#check for invalid hostname (using AIX ping)
         $status = "$CHECK_NAME UNKNOWN -- could not resolve hostname $hostname \n";
         print $status;					#print error message
         exit $UNKNOWN;					#exit script
      } 						#end of if block
      if ( /unknown host/ ) {				#check for invalid hostname (using Linux ping)
         $status = "$CHECK_NAME UNKNOWN -- could not resolve hostname $hostname \n";
         print $status;					#print error message
         exit $UNKNOWN;					#exit script
      } 						#end of if block
      if ( /no route to host/ ) {			#check for routing problems
         $status = "$CHECK_NAME UNKNOWN -- could not find a route to $hostname - check routing tables \n";
         print $status;					#print error message
         exit $UNKNOWN;					#exit script
      } 						#end of if block
   }							#end of while loop
   close IN;						#close filehandle
}							#end of subroutine


sub check_hr_mib {
   #
   # Check the host-resources MIB 
   # .iso.org.dod.internet.mgmt.mib-2.host.hrSystem.hrSystemUptime  
   #
   print "running check_hr_mib subroutine \n" if ($verbose eq "yes");
   $oid = ".1.3.6.1.2.1.25.1.1.0";
   $cmd = "$snmpget $oid 2>&1";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   open(IN,"$cmd |"); 					#open a filehandle for reading 
   while (<IN>) {                          		#read a line from STDIN
      if ( /Timeticks/ ) {                		#look for a response to the snmp query
         $status = "$CHECK_NAME OK -- SNMP response from $hostname on $oid \n";
      } else {   
         $status = "$CHECK_NAME CRITICAL -- no SNMP response from $hostname on host-resources MIB $oid  \n";
         print $status;					#print error message
         exit $CRITICAL;				#exit script 
      }							#end of if/else block
   }							#end of while loop
   close IN;						#close filehandle
}							#end of subroutine


sub check_aix_mib {
   #
   # Check the AIX MIB 
   # .iso.org.dod.internet.private.enterprises.ibm.ibmProd.ibmAIX.aixSystem.aixSystemEnvironment 
   #
   print "running check_aix_mib subroutine \n" if ($verbose eq "yes");
   $oid = ".1.3.6.1.4.1.2.6.191.1.2.1.0";
   $cmd = "$snmpget $oid 2>&1";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   open(IN,"$cmd |"); 					#open a filehandle for reading 
   while (<IN>) {                          		#read a line from STDIN
      if ( /INTEGER/ ) {                 		#look for a response to the snmp query
         $status = "$CHECK_NAME OK -- SNMP response from $hostname on $oid \n";
      } else {
         $status = "$CHECK_NAME CRITICAL -- no SNMP response from $hostname on $oid.  This is the AIX MIB.  Confirm $hostname runs AIX, and the relevant section is uncommented from /etc/snmpdv3.conf. \n";
         print $status;					#print error message
         exit $CRITICAL;				#exit script 
      }							#end of if/else block
   }							#end of while loop
   close IN;						#close filehandle
}				 			#end of subroutine


sub check_xmd_mib {
   #
   # Check the xmd MIB (provided by Performance Toolbox)
   # .iso.org.dod.internet.private.enterprises.ibm.ibmAgents.aix.aixRISC6000.risc6000private.risc6000perf.xmd.xmdCPU.xmdCPUEntry.xmdCPUIndex
   #
   print "running check_xmd_mib subroutine \n" if ($verbose eq "yes");
   $oid = ".1.3.6.1.4.1.2.3.1.2.2.2.1.1.1.1.1";
   $cmd = "$snmpget $oid 2>&1";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   open(IN,"$cmd |"); 					#open a filehandle for reading 
   while (<IN>) {                          		#read a line from STDIN
      if ( /INTEGER/ ) {                 		#look for a response to the snmp query
         $status = "$CHECK_NAME OK -- SNMP response from $hostname on $oid \n";
      } else {
         $status = "$CHECK_NAME CRITICAL -- no SNMP response from $hostname on $oid.  This is the enterprise MIB for PTX.  Confirm $hostname runs AIX, and that xmservd is running. Try running /usr/local/bin/enable_snmp.sh\n";
         print $status;					#print error message
         exit $CRITICAL;				#exit script 
      }							#end of if/else block
   }							#end of while loop
   close IN;						#close filehandle
}							#end of subroutine


sub print_output {
   #
   # If we get this far, no errors were found.  Print the most recent OK message and exit 
   #
   print "running print_output subroutine \n" if ($verbose eq "yes");
   print $status;
   exit $OK;
}						#end of subroutine




# -------- main body of script ----------
get_options;
sanity_checks;
ping_host;
check_hr_mib;
check_aix_mib;
check_xmd_mib;
print_output;

